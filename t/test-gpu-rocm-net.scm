; scheme (ref-sgemv! 1. mhw #f vxi 0. vhz)
; c      (sgemv! 1. (gpu-array mhw) CblasNoTrans (gpu-array vxi) 0. (gpu-array vhz))
; gpu    (gpu-sgemv! 1. mhw #f vxi 0. vhz)

(define (test-gpu-rocm-sigmoid)
  (let* ((len (inexact->exact (truncate (+ 2 (* 20 (random-uniform))))))
         (src (gpu-make-vector len))
         (dst (gpu-make-vector len))
         (dst2 (gpu-make-vector len)))
    (let ((arr (gpu-array src)) (n 0))
      (array-map! arr (lambda (x) (set! n (1+ n)) (/ n len)) arr))
    (gpu-dirty-set! src 1)
    (gpu-array-sigmoid src dst)
    (gpu-save-array dst)
    ; reference sigmoid on cpu
    (array-sigmoid (gpu-array src) (gpu-array dst2))
    (test-assert-arrays-equal (list (gpu-array dst)) (list (gpu-array dst2)) 0.001)))

(define (test-cpu-net-run net input)
  (let ((arrs (map (lambda (rv) (gpu-array rv)) (array->list net))))
    (match arrs
      ((mhw vhz vho myw vyz vyo vxi)
       (array-scopy! input vxi)
       (ref-sgemv! 1. mhw #f vxi 0. vhz)
       (array-map! vho sigmoid vhz)
       (ref-sgemv! 1. myw #f vho 0. vyz)
       (array-map! vyo sigmoid vyz)
       #f))))

(define (test-copy-net dst src)
  (array-for-each (lambda (drv srv)
                    (let ((arr (gpu-array srv)))
                      (gpu-array-copy drv arr)
                      ))
                  dst src)
  dst)

(define (test-gpu-rocm-net)
  (let* ((hlen 40)
         (ilen 198)
         (test-array (lambda (arv brv)
           (test-assert-arrays-equal (map (lambda (rv) (gpu-array rv))
                                          (array->list arv))
                                     (map (lambda (rv) (gpu-array rv))
                                          (array->list brv))
                                     0.004)))
         (randomize-net (lambda (net)
           (array-for-each (lambda (arr)
                             (gpu-array-apply arr (lambda (x) (* 10. (- (random-uniform) .5)))))
                           net)
           net))
         (vxi  (rand-v! (make-typed-array 'f32 *unspecified* ilen)))
         (cnet (randomize-net (make-net hlen)))
         (gnet (test-copy-net (make-net hlen) cnet)))
    (array-map! vxi (lambda (x) (* 0.01 (- (random-uniform) .5))) vxi)
    (test-cpu-net-run cnet vxi)
    (net-run gnet vxi)
    (array-for-each (lambda (rv) (gpu-refresh rv)) gnet)
    (test-array cnet gnet)))
