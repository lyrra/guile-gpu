
(define (test-cblas-blas-sgemv)
  (do ((tn 0 (1+ tn))) ((= tn 1000))
  (let* ((alpha 1.0)
         (beta  1.0)
         (rows (logand #xfffe (inexact->exact (truncate (+ 2 (* 8 (random-uniform)))))))
         (cols (logand #xfffe (inexact->exact (truncate (+ 2 (* 256 (random-uniform)))))))
         (rm (make-typed-array 'f32 *unspecified* rows cols))
         (rx (make-typed-array 'f32 *unspecified* cols))
         (ry (make-typed-array 'f32 0. rows)))
    (do ((i 0 (1+ i))) ((= i rows))
      (array-set! ry (+ 7 i) i)
      (do ((j 0 (1+ j))) ((= j cols))
        (array-set! rx (- (random-uniform) .5) j)
        (array-set! rm (- (random-uniform) .5) i j)))
    (let ((x2 (array-copy rx))
          (y2 (array-copy ry)))
      (sgemv! alpha rm CblasNoTrans rx beta ry)
      (ref-sgemv! alpha rm #f x2 beta y2)
      (let ((err 0.))
        (array-for-each (lambda (a b)
                          (set! err (+ err (abs (- a b)))))
                        ry y2)
        (format #t "sgemv dims: ~a, ~a err: ~a~%" rows cols err))
      (assert-array-equal ry y2)))))
